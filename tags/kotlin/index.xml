<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>kotlin on Jacques Smuts</title>
    <link>https://jacquessmuts.github.io/tags/kotlin/</link>
    <description>Recent content in kotlin on Jacques Smuts</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>© This post is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License，please give source if you wish to quote or reproduce.</copyright>
    <lastBuildDate>Wed, 07 Oct 2020 02:48:01 +0200</lastBuildDate>
    
	<atom:link href="https://jacquessmuts.github.io/tags/kotlin/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>The Testing Pyramid Has a Deeper Foundation</title>
      <link>https://jacquessmuts.github.io/post/compile_time_tests/</link>
      <pubDate>Wed, 07 Oct 2020 02:48:01 +0200</pubDate>
      
      <guid>https://jacquessmuts.github.io/post/compile_time_tests/</guid>
      <description>&lt;p&gt;Kotlin allows us to structure our code around compile-time tests. This post explains how.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Further Reading for Ethical Programming</title>
      <link>https://jacquessmuts.github.io/post/ethicc_references/</link>
      <pubDate>Sun, 06 Sep 2020 19:51:12 +0200</pubDate>
      
      <guid>https://jacquessmuts.github.io/post/ethicc_references/</guid>
      <description>&lt;p&gt;This post contains further reading for my recent talk on the Slippery Slope of Unethical Programming&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Getting arbitrary properties from unknown classes with KProperty</title>
      <link>https://jacquessmuts.github.io/post/kproperty/</link>
      <pubDate>Thu, 01 Aug 2019 20:29:26 +0200</pubDate>
      
      <guid>https://jacquessmuts.github.io/post/kproperty/</guid>
      <description>&lt;p&gt;The Kproperty class is powerful and useful.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Coroutines Introduction Video</title>
      <link>https://jacquessmuts.github.io/post/coroutines_presentation/</link>
      <pubDate>Wed, 17 Jul 2019 21:53:05 +0200</pubDate>
      
      <guid>https://jacquessmuts.github.io/post/coroutines_presentation/</guid>
      <description>&lt;p&gt;A video presentation on coroutines, a talk I gave at GDG Cape Town&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Using the synchronized keyword in coroutines?</title>
      <link>https://jacquessmuts.github.io/post/coroutine_sync_mutex/</link>
      <pubDate>Sun, 02 Jun 2019 09:08:10 +0200</pubDate>
      
      <guid>https://jacquessmuts.github.io/post/coroutine_sync_mutex/</guid>
      <description>&lt;p&gt;Working with coroutines is subtly different from normal locking functions. Introduce some thread-safety with mutex.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Escaping Callback Hell with Generic SuspendCoroutine Infix Extension Functions</title>
      <link>https://jacquessmuts.github.io/post/callback_hell/</link>
      <pubDate>Mon, 20 May 2019 23:12:36 +0200</pubDate>
      
      <guid>https://jacquessmuts.github.io/post/callback_hell/</guid>
      <description>&lt;p&gt;Callback hell happens all the time in Android. Luckily, with coroutines, there&#39;s an easy way out.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>The Problem with Kotlin Kfunction Receiver Functions</title>
      <link>https://jacquessmuts.github.io/post/kfunction_analogues/</link>
      <pubDate>Wed, 08 May 2019 17:54:58 +0200</pubDate>
      
      <guid>https://jacquessmuts.github.io/post/kfunction_analogues/</guid>
      <description>&lt;p&gt;KFunction can be written in more than one way. Here&#39;s a list of analogues, plus some criticism of the Receiver Function.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Creating and Deploying an Android Library via CircleCI</title>
      <link>https://jacquessmuts.github.io/post/library_template/</link>
      <pubDate>Tue, 07 May 2019 22:19:00 +0200</pubDate>
      
      <guid>https://jacquessmuts.github.io/post/library_template/</guid>
      <description>&lt;p&gt;This is the template I use to create new Android libraries with CircleCI support for Continuous Deployment.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Generics &#43; Reflection &#43; Type Inference &#43; Reified Type = Kotlin Magic</title>
      <link>https://jacquessmuts.github.io/post/generic_interface_and_methods/</link>
      <pubDate>Wed, 01 May 2019 08:30:00 +0200</pubDate>
      
      <guid>https://jacquessmuts.github.io/post/generic_interface_and_methods/</guid>
      <description>&lt;p&gt;With Kotlin, it&#39;s easier than ever to code with reflection and generics. This post attempts to give one example.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Don&#39;t Pass Around Your Room/Database Entity</title>
      <link>https://jacquessmuts.github.io/post/modularization_room/</link>
      <pubDate>Thu, 25 Apr 2019 10:35:54 +0200</pubDate>
      
      <guid>https://jacquessmuts.github.io/post/modularization_room/</guid>
      <description>&lt;p&gt;If you&#39;re thinking of modularizing your Android App and you use Android Room, you should not pass around your Room Entity.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Is your modularization making any progress?</title>
      <link>https://jacquessmuts.github.io/post/modularization/</link>
      <pubDate>Sat, 20 Apr 2019 21:15:17 +0200</pubDate>
      
      <guid>https://jacquessmuts.github.io/post/modularization/</guid>
      <description>&lt;p&gt;You should modularize your Kotlin Android app, since it&#39;s the best way to enforce &lt;a href=&#34;https://developer.android.com/jetpack/docs/guide#common-principles&#34;&gt;separation of concerns&lt;/a&gt;, but how do you know if you&#39;re doing it right? Here&#39;s some tips to help.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>